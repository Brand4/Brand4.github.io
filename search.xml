<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>将照片按照拍摄时间排序</title>
      <link href="/2018/09/06/%E5%B0%86%E7%85%A7%E7%89%87%E6%8C%89%E7%85%A7%E6%8B%8D%E6%91%84%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/09/06/%E5%B0%86%E7%85%A7%E7%89%87%E6%8C%89%E7%85%A7%E6%8B%8D%E6%91%84%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>上一篇博客里已经实现了轨迹的绘制，但是这时的轨迹并不是按照你的旅游顺序来绘制的，这就需要我们先将照片按照拍摄时间排序。</p><p>我先声明了一个结构体，包括拍摄时间，拍摄时间与当前时间的差值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct image</span><br><span class="line">&#123;</span><br><span class="line">    easyexif::EXIFInfo result;</span><br><span class="line"></span><br><span class="line">    QDateTime time;</span><br><span class="line">    int difference;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">image ab[20];</span><br></pre></td></tr></table></figure></p><p>然后写了一个排序的算法，思路为获取每一张照片的拍摄时间与当前时间的差值，然后用冒泡排序比较差值后排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//将GPS信息按照时间先后顺序排序</span><br><span class="line">void MainWindow::arrangeGPS()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0;i &lt;len;i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        //获取各图片的拍摄时间</span><br><span class="line">        ab[i].time = QDateTime::fromString(QString::fromStdString(ab[i].result.DateTime),</span><br><span class="line">                         &quot;yyyy:MM:dd hh:mm:ss&quot;);</span><br><span class="line">        //获取当前时间</span><br><span class="line">        QDateTime now = QDateTime::currentDateTime();</span><br><span class="line"></span><br><span class="line">        //比较各图片与现在时间的差值，精确到秒</span><br><span class="line">        ab[i].difference = ab[i].time.secsTo(now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = 0; j &lt; len - i - 1; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (ab[j].difference &lt; ab[j+1].difference)</span><br><span class="line">            &#123;</span><br><span class="line">                image temp[50];</span><br><span class="line">                temp[j] = ab[j];</span><br><span class="line">                ab[j] = ab[j + 1];</span><br><span class="line">                ab[j + 1] = temp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个容易犯错的地方，我当时比较差值后，交换的是结构体里的time，导致无法正常排序。<br>以后如果遇到类似排序，应该交换的是整个结构体，才能正确排序。</p>]]></content>
      
      <categories>
          
          <category> 行程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
            <tag> exif </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>qt与js交互，并在百度地图上绘制轨迹</title>
      <link href="/2018/09/02/qt%E4%B8%8Ejs%E4%BA%A4%E4%BA%92%EF%BC%8C%E5%B9%B6%E5%9C%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E8%BD%A8%E8%BF%B9/"/>
      <url>/2018/09/02/qt%E4%B8%8Ejs%E4%BA%A4%E4%BA%92%EF%BC%8C%E5%B9%B6%E5%9C%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E8%BD%A8%E8%BF%B9/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong><br>获得了照片的GPS信息后，我们现在要做的就是把GPS信息传入JS中，然后通过百度地图API将轨迹绘制出来。</p><p><strong>一：在程序页面加载地图</strong><br>qt5.6及之后取消了QWebkits,转为使用QWebEngine.</p><p>在qt5.6的额ui设计师界面中，并不能直接找到QWebView，如果没有这个ui组件，我们就无法将浏览器嵌入到我们的程序中，就无法加载地图了，所以第一步我们要弄出一个类似的组件，在这里我使用了QWebEngineView。</p><p>QWebEngineView使用widget组件，拖拉出来是一个透明的组件，对着组件按右键-&gt;promote to.. -&gt;选择QWebEngineView（没有的话手动输入QWebEngineView），如图所示。<br><figure class="image-box">                <img src="/images/1.png" alt="" title="" class="">                <p></p>            </figure><br>这样我们便能通过ui组件来加载地图了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;widget-&gt;load(QUrl(&quot;qrc:/map/map.html&quot;));//也可以填本地html文件地址</span><br><span class="line">ui-&gt;widget-&gt;show();</span><br></pre></td></tr></table></figure><p>这样就可以看到地图了。</p><p><strong>二：将GPS信息传入JS</strong><br>在ui设计师界面拖一个button，然后转到槽，在mainwindow.cpp中这样写这个槽函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::on_buttonDraw_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;setCurrentIndex(0);</span><br><span class="line"></span><br><span class="line">    QJsonArray num_json, num2_json;//声明QJsonArray</span><br><span class="line">    QJsonDocument num_document, num2_document;  //将QJSonArray改为QJsonDocument类</span><br><span class="line">    QByteArray num_byteArray, num2_byteArray;</span><br><span class="line"></span><br><span class="line">    double num[50];</span><br><span class="line">    double num2[50];</span><br><span class="line">    for(int i =0;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = result[i].GeoLocation.Longitude;//result为保存照片信息的对象，详情请参考上一篇博客</span><br><span class="line">        num2[i] = result[i].GeoLocation.Latitude;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=0; i&lt;length; i++)//将数组传入num_json</span><br><span class="line">    &#123;</span><br><span class="line">        num_json.append(num[i]);</span><br><span class="line">        num2_json.append(num2[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_document.setArray(num_json);</span><br><span class="line">    num2_document.setArray(num2_json);</span><br><span class="line"></span><br><span class="line">    num_byteArray = num_document.toJson(QJsonDocument::Compact);</span><br><span class="line">    num2_byteArray = num2_document.toJson(QJsonDocument::Compact);</span><br><span class="line"></span><br><span class="line">    QString numJson(num_byteArray);//再转为QString</span><br><span class="line">    QString num2Json(num2_byteArray);</span><br><span class="line">    </span><br><span class="line">    QString cmd = QString(&quot;showarray(\&quot;%1\&quot;,\&quot;%2\&quot;,\&quot;%3\&quot;)&quot;).arg(numJson).arg(num2Json);</span><br><span class="line">    ui-&gt;widget-&gt;page()-&gt;runJavaScript(cmd);//传给javascript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不详细解释了，代码里有注释<br>html文件参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body, html,#allmap &#123;width: 100%;height: 100%;overflow: hidden;margin:0;font-family:&quot;微软雅黑&quot;;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=替换成你自己的AK&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;title&gt;基于GPS的位置追踪及地理围栏&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;allmap&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">////地图初始化</span><br><span class="line"></span><br><span class="line">var mapOptions=&#123;</span><br><span class="line"></span><br><span class="line">                minZoom: 3,//最小级别</span><br><span class="line">                maxZoom:19,//最大级别</span><br><span class="line">                mapType:  BMAP_NORMAL_MAP//默认街道图</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">var map = new BMap.Map(&quot;allmap&quot;,mapOptions);    // 创建Map实例 命名空间为BMAP</span><br><span class="line">map.centerAndZoom(new BMap.Point(114.0, 30.0), 5);  // 初始化地图,设置中心点坐标和地图级别</span><br><span class="line">map.setCurrentCity(&quot;武汉&quot;);          // 设置地图显示的城市</span><br><span class="line">map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function showhello()</span><br><span class="line">&#123;</span><br><span class="line">    //alert(&quot;Welcome, newbird &quot;);</span><br><span class="line">    var string= &quot;hello oldbird&quot;;</span><br><span class="line">    ReinforcePC.showinfo(string);//调用qt中的showinfo函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showarray(numlist,num2list)//仅把qt传来的数组转换成可用的list</span><br><span class="line">&#123;</span><br><span class="line">//alert(numlist);</span><br><span class="line">var num_list,num2_list;//以下为格式转换，分割成可用的数组</span><br><span class="line">num_list = numlist.substring(1,numlist.length-1);</span><br><span class="line">num2_list = num2list.substring(1,num2list.length-1);</span><br><span class="line">num_list = num_list.split(&quot;,&quot;);</span><br><span class="line">num2_list = num2_list.split(&quot;,&quot;);</span><br><span class="line">//alert(&quot;the num_list is: &quot;+num_list[0]+&quot; &quot;+num_list[1]);</span><br><span class="line"></span><br><span class="line">var tracelist = [];//为轨迹做准备，把所有的点扔里面，但不对每个点标注</span><br><span class="line">for(i=0;i&lt;num_list.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">point= new BMap.Point(num_list[i],num2_list[i]);</span><br><span class="line">tracelist.push(point);//将每个点压入数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var polyline =new BMap.Polyline(tracelist, &#123;</span><br><span class="line">enableEditing: false,//是否启用线编辑，默认为false</span><br><span class="line">enableClicking: false,//是否响应点击事件，默认为true</span><br><span class="line">strokeWeight:&apos;4&apos;,//折线的宽度，以像素为单位</span><br><span class="line">strokeOpacity: 0.8,//折线的透明度，取值范围0 - 1</span><br><span class="line">strokeColor:&quot;red&quot; //折线颜色</span><br><span class="line">&#125;);</span><br><span class="line">map.addOverlay(polyline);          //增加折线</span><br><span class="line">map.centerAndZoom(tracelist[num_list.length-1], 15);</span><br><span class="line"></span><br><span class="line">//首尾加上标注点</span><br><span class="line">var marker = new BMap.Marker(tracelist[0]); // 创建点</span><br><span class="line">map.addOverlay(marker);                 // 加载标注</span><br><span class="line">var marker = new BMap.Marker(tracelist[num_list.length-1]); // 创建点</span><br><span class="line">map.addOverlay(marker);                 // 加载标注</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样我们便实现了把照片的在轨迹上绘制出来</p>]]></content>
      
      <categories>
          
          <category> 行程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
            <tag> 百度地图API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何轻松的导出照片的EXIF信息</title>
      <link href="/2018/08/31/%E5%A6%82%E4%BD%95%E8%BD%BB%E6%9D%BE%E5%9C%B0%E5%AF%BC%E5%87%BA%E7%85%A7%E7%89%87%E7%9A%84EXIF%E4%BF%A1%E6%81%AF/"/>
      <url>/2018/08/31/%E5%A6%82%E4%BD%95%E8%BD%BB%E6%9D%BE%E5%9C%B0%E5%AF%BC%E5%87%BA%E7%85%A7%E7%89%87%E7%9A%84EXIF%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>要做行程记录，那第一步肯定是要得到照片的GPS，拍摄时间等信息。</p><p>想过自己写，但是实训时间比较短，而且这一块比较复杂，就打算找个轮子直接用了。</p><p>游遍百度没找到合适的，首先看到Exiv2库可以实现提取exif信息，但下了之后首先觉得太臃肿，其次各种环境都配好了，还是莫名地不能用。之后转战github，上面有很多轻量级的库，试了几个之后发现easyexif这个最好用，它不依赖第三方，且使用简单。<a href="https://github.com/mayanklahiri/easyexif" title="传送门" target="_blank" rel="noopener">传送门</a></p><p>C语言具体食用方法请参考github的demo。<br>qt里就把exif.h和exif.cpp加载到自己项目中，然后声明一个对象<code>easyexif::EXIFInfo result</code>，之后需要照片的什么信息就调用对象里的相应的成员。</p><p>完成到这里我们已经能实现提取exif信息了，但是还没有保存exif信息。easyexif里面有一个函数parseFrom，作用是将照片的信息保存在文件里。<br>这是函数的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int parseFrom(const unsigned char *data, unsigned length);</span><br><span class="line">int parseFrom(const std::string &amp;data);</span><br></pre></td></tr></table></figure></p><p>这两个函数的作用是相同的，这里在qt中推荐使用第二个，因为在QFile中没有直接把参数转换为unsigned char*的函数，也不能强制转换，编译虽能通过，但是运行就报错。<br>qt中这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.parseFrom(file.readAll().toStdString());//自己先用QFile声明file并将其打开</span><br></pre></td></tr></table></figure></p><p>这样就轻松地实现了将照片地EXIF信息导出并保存。<br>第一次写博客，如有错误或更好的方法，欢迎在评论区交流。</p>]]></content>
      
      <categories>
          
          <category> 行程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
            <tag> exif </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>行程记录</title>
      <link href="/2018/08/31/%E8%A1%8C%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/08/31/%E8%A1%8C%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>本人比较喜欢旅行，旅行后怎么少的了记录和分享呢？</p><p>手机端有很多记录旅行的软件，其中我最喜欢面包旅行这一款APP。</p><p>但在PC端我却找不到类似软件，没有的话，身为软件人，为什么不自己写一款呢？</p><p>于是我实训选了行程记录这个项目，已开发了1.0版本，现在写相关博客来记录开发时遇到的坑及解决办法。</p><p>开发环境：qt5.6.3。附上项目部分截图：<br><figure class="image-box">                <img src="/images/first.PNG" alt="开始旅行" title="" class="">                <p>开始旅行</p>            </figure><br><figure class="image-box">                <img src="/images/second.PNG" alt="导入图片&添加游记" title="" class="">                <p>导入图片&添加游记</p>            </figure><br><figure class="image-box">                <img src="/images/third.PNG" alt="绘制旅行轨迹" title="" class="">                <p>绘制旅行轨迹</p>            </figure></p>]]></content>
      
      <categories>
          
          <category> 行程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/30/hello-world/"/>
      <url>/2018/08/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
